@page "/CreateMatch"
@using DTO
@using Frontend.Data
@using Frontend.Enum
@inject NavigationManager NavigationManager
@inject Matches Matches
@rendermode InteractiveServer

<div>
    <h3>CreateMatch</h3>
    <div class="container">
        <div class="row row-cols-2">
            @{
                foreach (var team in _players.Keys)
                {
                    <div class="col">
                        @{
                            <h3>@(team == Teams.TeamOne ? "Team 1" : "Team 2")</h3>
                            _players.TryGetValue(team, out var players);
                            <div class="row">
                                <p>Players</p>
                            </div>
                            foreach (var user in players)
                            {
                                <div class="row pb-3">
                                    <input @oninput="@(text => { user.DisplayName = text.Value.ToString(); })">
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>
    </div>
    @foreach (var user in _players.SelectMany(player => player.Value))
    {
        <p>@user.DisplayName</p>
    }
    <button @onclick="CreateAsync">Create</button>
</div> 



@code {
    private Dictionary<Teams,List<User>> _players = new()
    {
        {Teams.TeamOne, [new User(), new User()] },
        {Teams.TeamTwo, [new User(), new User()] }
    };

    private Task CreateAsync()
    {
        var random = new Random();
        var id = random.Next();
        var match = new DTO.Match()
        {
            DateTimeOffset = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
            GameType = new GameType
            {
                Id = 1,
                Description = "Normal"
            },
            Winner = (int)Teams.None,
            Results = new List<Result>(),
            Sets = new List<Set>()
            {
                new(1)
            }
        };
        
        foreach (var playersKey in _players.Keys)
        {
            _players.TryGetValue(playersKey, out var value);
            foreach (var user in value)
            {
                match.Results.Add(new Result
                {
                    Team = (int)playersKey,
                    User = user
                }); 
            }
        }
        
        Matches.Data.Add(id, match);

        NavigationManager.NavigateTo($"/match/{id}");
        return Task.CompletedTask;
    }
}