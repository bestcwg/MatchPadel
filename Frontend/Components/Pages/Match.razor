@page "/match/{Id:int}"
@using DTO
@using Frontend.Data
@using Frontend.Enum
@inject Matches Matches
@inject HttpClientService HttpClientService
@rendermode InteractiveServer

<div>
    <h3>Match Id: @Id</h3>
    <h5>@_winner</h5>
    <h1>Set @_sets.ElementAt(_currentSelectedSet).Number</h1>
    <div class="container">
        <div class="row row-cols-2">
            @foreach (var team in _players)
            {
                <div class="col">
                    <h3>@(team.Key == Teams.TeamOne ? "Team 1" : "Team 2")</h3> 
                    @foreach (var player in team.Value)
                    {
                        <p>@player.DisplayName</p>
                    }
                    <p>@(team.Key == Teams.TeamOne ?
                           _sets.ElementAt(_currentSelectedSet).TeamOnePoints :
                           _sets.ElementAt(_currentSelectedSet).TeamTwoPoints)</p>
                    <button @onclick="@(() => AddSetPoint(team.Key))">+</button>
                    <button @onclick="@(() => RemoveSetPoint(team.Key))">-</button>
                </div>
            }
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="@(_currentSelectedSet == 0 ? "invisible" : "visible") col">
                <button @onclick="@(() => SwitchMatchSet("back"))">Back</button>
            </div>
            <div class="@(_currentSelectedSet == _sets.Count - 1 ? "visible" : "invisible") col">
                <button @onclick="CreateSet">Finish Set</button>
            </div>
            <div class="@(_currentSelectedSet == 2 || _currentSelectedSet == _sets.Count - 1 ? "invisible" : "visible") col">
                <button @onclick="@(() => SwitchMatchSet("forward"))">Forward</button>
            </div>
            <div>
                <button @onclick="LogMatch">Log match</button>
            </div>
        </div>
    </div>
    <div>
        <div class="container">
            <div class="row row-cols-4">
                <div class="col">
                    <p>Sets</p>
                    <div class="row">
                        <p>Team 1</p> 
                    </div>
                    <div class="row">
                        <p>Team 2</p>
                    </div>
                </div>
                @foreach (var set in _sets)
                {
                    <div class="col">
                        <p>Set @set.Number</p>
                        <div class="row">
                            <p>@set.TeamOnePoints</p>
                        </div>
                        <div class="row">
                            <p>@set.TeamTwoPoints</p>
                        </div>
                    </div>
                }
            </div> 
        </div> 
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private Dictionary<Teams, List<User>> _players;
    private List<MatchSet> _sets = [];
    private int _currentSelectedSet;
    private Teams _winner = Teams.None;
    private const int MaxSets = 3;

    protected override Task OnInitializedAsync()
    {
        if (!Matches.Data.TryGetValue(Id, out var players)) return Task.CompletedTask;
        _players = players;
        _sets.Add(new MatchSet(1));
        return base.OnInitializedAsync();
    }

    private void SwitchMatchSet(string direction)
    {
        switch (direction)
        {
            case "back":
                _currentSelectedSet--;
                break;
            case "forward":
                _currentSelectedSet++;
                break;
        }
    }

    private void CreateSet()
    {
        if (_sets.Count == MaxSets) return;
        
        _sets.Add(new MatchSet(_sets.Count + 1));
        _currentSelectedSet++;
    }

    private void AddSetPoint(Teams team)
    {
        switch (team)
        {
            case Teams.TeamOne:
                _sets.ElementAt(_currentSelectedSet).TeamOnePoints++;
                break;
            case Teams.TeamTwo:
                _sets.ElementAt(_currentSelectedSet).TeamTwoPoints++;
                break;
            default:
                throw new Exception("Team dont exist");
        }
    }
    
    private void RemoveSetPoint(Teams team)
    {
        switch (team)
        {
            case Teams.TeamOne:
                _sets.ElementAt(_currentSelectedSet).TeamOnePoints--;
                break;
            case Teams.TeamTwo:
                _sets.ElementAt(_currentSelectedSet).TeamTwoPoints--;
                break;
            default:
                throw new Exception("Team dont exist");
        }
    }

    private void CheckWhoWon()
    {
        _winner = _sets switch
        {
            _ when _sets.Count(x => x.TeamOnePoints >= 6 && x.TeamOnePoints >= x.TeamTwoPoints + 2) >= 2 => Teams.TeamOne,
            _ when _sets.Count(x => x.TeamTwoPoints >= 6 && x.TeamTwoPoints >= x.TeamOnePoints + 2) >= 2 => Teams.TeamTwo,
            _ => Teams.None 
        };
    }

    private async Task LogMatch()
    {
        CheckWhoWon();
        if (_winner == Teams.None) return;
        var currentMatch = new DTO.Match()
        {
           DateTimeOffset = DateTimeOffset.Now.ToUnixTimeSeconds(),
           GameType = new GameType()
           {
               Id = 1,
               Description = "Normal"
           },
           Results = new List<Result>()
        };
        
        foreach (var player in _players)
        {
           player.Value.ForEach(p => currentMatch.Results.Add(new Result()
           {
              User = new User()
              {
                  DisplayName = p.DisplayName.ToLower()
              },
              Score = player.Key == _winner ? 1 : 0
           })); 
        }
        
        await HttpClientService.PostMatchAsync(currentMatch);
    }
    
    private class MatchSet(int number)
    {
        public int Number { get; init; } = number;
        public int TeamOnePoints { get; set; }
        public int TeamTwoPoints { get; set; }
    }
}