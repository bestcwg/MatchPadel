@page "/match/{Id:int}"
@using DTO
@using Frontend.Data
@using Frontend.Enum
@inject Matches Matches
@inject HttpClientService HttpClientService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div>
    <h3>Match Id: @Id</h3>
    <h5>@_winner</h5>
    <h1>Set @_currentMatch.Sets.ElementAt(_currentSelectedSet).Number</h1>
    <div class="container">
        <div class="row row-cols-2">
            @foreach (var team in new List<Teams>() { Teams.TeamOne , Teams.TeamTwo})
            {
                <div class="col">
                    <h3>@(team == Teams.TeamOne ? "Team 1" : "Team 2")</h3> 
                    @foreach (var player in _currentMatch.Results.Where(x => x.Team == (int)team ))
                    {
                        <p>@player.User.DisplayName</p>
                    }
                    <p>@(team == Teams.TeamOne ?
                           _currentMatch.Sets.ElementAt(_currentSelectedSet).TeamOneScore :
                           _currentMatch.Sets.ElementAt(_currentSelectedSet).TeamTwoScore)</p>
                    <button @onclick="@(() => AddSetPoint(team))">+</button>
                    <button @onclick="@(() => RemoveSetPoint(team))">-</button>
                </div>
            }
        </div>
    </div>
    <div class="container">
        <div class="row">
            <div class="@(_currentSelectedSet == 0 ? "invisible" : "visible") col">
                <button @onclick="@(() => SwitchMatchSet("back"))">Back</button>
            </div>
            <div class="@(_currentSelectedSet == _currentMatch.Sets.Count - 1 ? "visible" : "invisible") col">
                <button @onclick="CreateSet">New set</button>
            </div>
            <div class="@(_currentSelectedSet == 2 || _currentSelectedSet == _currentMatch.Sets.Count - 1 ? "invisible" : "visible") col">
                <button @onclick="@(() => SwitchMatchSet("forward"))">Forward</button>
            </div>
            <div>
                <button @onclick="LogMatch">Log match</button>
            </div>
        </div>
    </div>
    <div>
        <div class="container">
            <div class="row row-cols-4">
                <div class="col">
                    <p>Sets</p>
                    <div class="row">
                        <p>Team 1</p> 
                    </div>
                    <div class="row">
                        <p>Team 2</p>
                    </div>
                </div>
                @foreach (var set in _currentMatch.Sets)
                {
                    <div class="col">
                        <p>Set @set.Number</p>
                        <div class="row">
                            <p>@set.TeamOneScore</p>
                        </div>
                        <div class="row">
                            <p>@set.TeamTwoScore</p>
                        </div>
                    </div>
                }
            </div> 
        </div> 
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private int _currentSelectedSet;
    private Teams _winner = Teams.None;
    private const int MaxSets = 3;
    private DTO.Match _currentMatch;

    protected override Task OnInitializedAsync()
    {
        if (!Matches.Data.TryGetValue(Id, out var currentMatch)) return Task.CompletedTask;
        _currentMatch = currentMatch;
        return base.OnInitializedAsync();
    }

    private void SwitchMatchSet(string direction)
    {
        switch (direction)
        {
            case "back":
                _currentSelectedSet--;
                break;
            case "forward":
                _currentSelectedSet++;
                break;
        }
    }

    private void CreateSet()
    {
        if (_currentMatch.Sets.Count == MaxSets) return;
        
        _currentMatch.Sets.Add(new Set(_currentMatch.Sets.Count + 1));
        _currentSelectedSet++;
    }

    private void AddSetPoint(Teams team)
    {
        switch (team)
        {
            case Teams.TeamOne:
                _currentMatch.Sets.ElementAt(_currentSelectedSet).TeamOneScore++;
                break;
            case Teams.TeamTwo:
                _currentMatch.Sets.ElementAt(_currentSelectedSet).TeamTwoScore++;
                break;
            default:
                throw new Exception("Team dont exist");
        }
    }
    
    private void RemoveSetPoint(Teams team)
    {
        switch (team)
        {
            case Teams.TeamOne:
                _currentMatch.Sets.ElementAt(_currentSelectedSet).TeamOneScore--;
                break;
            case Teams.TeamTwo:
                _currentMatch.Sets.ElementAt(_currentSelectedSet).TeamTwoScore--;
                break;
            default:
                throw new Exception("Team dont exist");
        }
    }

    private void CheckWhoWon()
    {
        _winner = _currentMatch.Sets switch
        {
            _ when _currentMatch.Sets.Count(x => x.TeamOneScore >= 6 && x.TeamOneScore >= x.TeamTwoScore + 2) >= 2 => Teams.TeamOne,
            _ when _currentMatch.Sets.Count(x => x.TeamTwoScore >= 6 && x.TeamTwoScore >= x.TeamOneScore + 2) >= 2 => Teams.TeamTwo,
            _ => Teams.None 
        };
    }

    private async Task LogMatch()
    {
        CheckWhoWon();
        if (_winner == Teams.None) return;
        _currentMatch.Winner = (int)_winner;
        
        await HttpClientService.PostMatchAsync(_currentMatch);
        Matches.Data.Remove(Id);
        NavigationManager.NavigateTo("/");
    }
}