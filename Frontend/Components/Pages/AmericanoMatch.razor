@page "/AmericanoMatch/{Id:int}"
@using DTO
@using Frontend.Data
@inject HttpClientService httpClientService
@inject Matches Matches
@rendermode InteractiveServer
<h3>AmericanoMatch</h3>

<div>
    <p>Match @(matchNumber+1)</p>
    @{
        var match = _matches.ElementAt(matchNumber);
        <p>@match.TeamOne.Item1.DisplayName : @match.TeamTwo.Item1.DisplayName</p> 
        <p>@match.TeamOne.Item2.DisplayName : @match.TeamTwo.Item2.DisplayName</p>
        <input @oninput="args => match.TeamOne = match.TeamOne with { Item3 = int.Parse((string)args.Value) }"/>
        <input @oninput="args => match.TeamTwo = match.TeamTwo with { Item3 = int.Parse((string)args.Value) }"/>
        <p>@match.TeamOne.Item3 : @match.TeamTwo.Item3</p>
    }
    <button @onclick="() => { if(matchNumber < _matches.Count-1) matchNumber++;}">Next Match</button>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private DTO.Match _currentMatch;
    private List<AmericanoMatchModel> _matches = [];
    private Stack<Tuple<User, User>> _userMatches = [];
    private int matchNumber; 

    protected override Task OnInitializedAsync()
    {
        _currentMatch = Matches.GetMatch(Id);
        GenerateMatches();
        return base.OnInitializedAsync();
    }

    private Task GenerateMatches()
    {
        var stack = new Stack<User>();
        foreach (var currentMatchResult in _currentMatch.Results)
        {
            stack.Push(currentMatchResult.User); 
        }

        while (stack.Count > 0)
        {
            var user = stack.Pop();

            foreach (var other in stack)
            {
                _userMatches.Push(new Tuple<User, User>(user, other));
            }
        }
        while (_userMatches.Count > 0)
        {
            var user = _userMatches.Pop();

            foreach (var other in _userMatches)
            {
                if(IsSamePlayerInBothTeam(user, other)) continue;

                _matches.Add(new AmericanoMatchModel() { TeamOne = (user.Item1,user.Item2,0), TeamTwo = (other.Item1, other.Item2,0)});
            }
        }
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    private bool IsSamePlayerInBothTeam(Tuple<User, User> team1, Tuple<User, User> team2)
    {
        if (team1.Item1.DisplayName == team2.Item1.DisplayName || team1.Item1.DisplayName == team2.Item2.DisplayName) return true;
        if (team1.Item2.DisplayName == team2.Item1.DisplayName || team1.Item2.DisplayName == team2.Item2.DisplayName) return true;
        
        return false;
    }

    public class AmericanoMatchModel
    {
        public (User, User, int) TeamOne { get; set; }
        public (User, User, int) TeamTwo { get; set; }
    }
}