@using DTO
@using Frontend.Data
@using Frontend.Enum
@inject HttpClientService HttpClientService
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>PlayedMatchesGrid</h3>

<QuickGrid Items="_matches">
    <PropertyColumn Property="@(m => m.GameType.Description)" Title="Game Type" Class="gametype-cell"></PropertyColumn>
    <PropertyColumn Property="@(m => ConvertToLocaleTimeFromUnixTimeInSeconds(m.DateTimeOffset))" Title="Date" Class="date-cell"></PropertyColumn>
    <PropertyColumn Property="@(m => FindWinner(m, true))" Title="Winner" Class="player-cell"></PropertyColumn>
    <PropertyColumn Property="@(m => m.GameType.Id == (int)GameTypes.Normal ? FindWinner(m, false) : "")" Title="" Class="player-cell"></PropertyColumn>
    <PropertyColumn Property="@(m => FindLoser(m, true))" Title="Loser" Class="player-cell"></PropertyColumn>
    <PropertyColumn Property="@(m => m.GameType.Id == (int)GameTypes.Normal ? FindLoser(m, false) : "")" Title="" Class="player-cell"></PropertyColumn>
    <TemplateColumn>
        <div>
            <button @onclick="async (args) => { _currentSelectedMatch = context; await OnOpenResult(args); }">Show score</button>
        </div>
    </TemplateColumn>
</QuickGrid>

<dialog id="sets-result" class="w-50">
    <div class="container">
        <div class="row row-col-6">
            @if (_currentSelectedMatch?.GameType?.Id == (int)GameTypes.Normal)
            {
                <div class="col">
                    <div class="row">
                        <h4>Set</h4>
                    </div>
                    <div class="row">
                        <p>Team One</p>
                    </div>
                    <div class="row">
                        <p>Team two</p>
                    </div>
                </div>
                if (_currentSelectedMatch.Sets.Count != 0)
                {
                    @foreach (var set in _currentSelectedMatch.Sets ??
                                         throw new Exception("Result list is null in sets result dialog box"))
                    {
                        <div class="col">
                            <div class="row">
                                <h4>@set.Number</h4>
                            </div>
                            <div class="row">
                                <p>@set.TeamOneScore</p>
                            </div>
                            <div class="row">
                                <p>@set.TeamTwoScore</p>
                            </div>
                        </div>
                    }
                }

                if (_currentSelectedMatch.Results.Any())
                {
                    <div class="col">
                        <h4>Team One</h4>
                        @foreach (var player in _currentSelectedMatch.Results.Where(x => x.Team == (int)Teams.TeamOne))
                        {
                            <p>@player.User.DisplayName</p>
                        }
                    </div>
                    <div class="col">
                        <h4>Team Two</h4>
                        @foreach (var player in _currentSelectedMatch.Results.Where(x => x.Team == (int)Teams.TeamTwo))
                        {
                            <p>@player.User.DisplayName</p>
                        }
                    </div>
                }     
            }
            else
            {
                foreach (var result in _currentSelectedMatch.Results)
                {
                    <div class="col">
                        <div class="row">
                            @result.User.DisplayName
                        </div>
                        <div class="row">
                            @result.Score
                        </div>
                    </div>    
                }
            }
        </div>
    </div>
    <form method="dialog">
        <button>Close</button>
    </form>
</dialog>   

<script>
    window.showSetsResultDialogBox = () => {
        document.getElementById("sets-result").showModal();
    };
</script>

<style>
    .date-cell {
        width: 200px; 
    }
    
    .player-cell {
        width: 100px; 
    }
    
    .gametype-cell {
        width: 200px; 
    }
</style>

@code {
    private IQueryable<Match>? _matches;
    private Match _currentSelectedMatch = new() {Results = new List<Result>(), Sets = new List<Set>()};

    protected override async Task OnInitializedAsync()
    {   
        var matches = HttpClientService.GetMatches();
        _matches = matches.AsQueryable();
        await base.OnInitializedAsync();
    }

    private async Task OnOpenResult(MouseEventArgs args)
    {  
        await JS.InvokeVoidAsync("showSetsResultDialogBox");
    }

    private string ConvertToLocaleTimeFromUnixTimeInSeconds(long unixTime)
    {
        var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        var datetime = epoch.AddSeconds(unixTime).ToLocalTime();
        return datetime.ToString("dd-MM-yyyy HH:mm");
    }

    private string FindWinner(Match match, bool isFirstUser)
    {
        var winner = string.Empty;
        try
        {
            winner = isFirstUser ? match.Results.First(r => r.Team == match.Winner).User.DisplayName : 
                match.Results.Last(r => r.Team == match.Winner).User.DisplayName;
        }
        catch (Exception)
        {
            CalculateWinner(ref winner);    
        }
        return winner;

        void CalculateWinner(ref string winner)
        {
            var winningUser = (user:"", score:0);
            foreach (var result in match.Results)
            {
                if (winningUser.score < result.Score) winningUser = (result.User.DisplayName, result.Score);
            }

            winner = winningUser.user;
        }
    }

    private string FindLoser(Match match, bool isFirstLoser)
    {
        var loser = string.Empty;
        try
        {
            loser = isFirstLoser ? match.Results.First(r => r.Team != match.Winner).User.DisplayName : match.Results.Last(r => r.Team != match.Winner).User.DisplayName;
        }
        catch (Exception)
        {
            CalculateLoser(ref loser);
        }
        return loser;

        void CalculateLoser(ref string loser)
        {
            var losingUser = (user:"", score:int.MaxValue);
            foreach (var result in match.Results)
            {
                if (losingUser.score > result.Score) losingUser = (result.User.DisplayName, result.Score);
            }

            loser = losingUser.user;
        }
    }
}